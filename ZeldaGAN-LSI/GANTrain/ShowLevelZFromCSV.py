'''
python ShowLevelZFromCSV.py <filepath> <index>
will show a generated level specified by a row (corresponding to <index>) in an all_sims CSV such as those generated by running an experiment (which will by default place the csv in ZeldaGAN-LSI/search/logs).
'''

import numpy
import json
import torch
from torch.autograd import Variable
import util.models.dcgan as dcgan
import toml
import sys
import pandas as pd
import matplotlib.pyplot as plt


boundary_value = 5.12 #??
nz = 16

imageSize = 16
ngf = 64
ngpu = 0
n_extra_layers = 0
features = 14 #len(json.load(open('GANTrain/index2str.json')))

generator = dcgan.DCGAN_G(imageSize, nz, features, ngf, ngpu, n_extra_layers)

str2idx = {"-" : 0, "W" : 1, "F" : 2, "B" : 3, "M" : 4, "P" : 5, "O" : 6, "I" : 7, "D" : 8, "S" : 9, "L" : 10, "V" : 11, "#" : 12, "U" : 13}

# idx2str = {v:k for k,v in str2idx.items()}

sprite_dict = {}
for i in range(14):
    pic = plt.imread("./sprites/{}.png".format(i))
    if pic.shape == (15,15,4):
        pic = pic[:,:,:3]
    sprite_dict[i] = pic

def gan_generate(x,batchSize,nz,model_path):
    generator.load_state_dict(torch.load(model_path, map_location=lambda storage, loc: storage))
    latent_vector = torch.FloatTensor(x).view(batchSize,nz, 1,1)
    with torch.no_grad():
        levels = generator(Variable(latent_vector))
    levels.data = levels.data[:, :, :11, :16] #16, 56
    im = levels.data.cpu().numpy()
    im = numpy.argmax( im, axis = 1)
    #from IPython import embed
    #embed()
    return im #json.dumps(im[0].tolist())
  
def prune_str(str):
    if str[-1] == "\n":
        str = str[:-1]
    return str
  
if __name__ == "__main__":
    csv_path = sys.argv[1]
    row = int(sys.argv[2])
    
    df = pd.read_csv(csv_path)
    str_vec = df.loc[row,'latentVector']
    str_content = str_vec[1:-1].split(" ")
    x = [float(prune_str(scalar)) for scalar in str_content if len(scalar) > 2]
    
    empty = gan_generate(x,1,nz,"./saved/netG_epoch_4999_6.pth")
    # print(empty.shape)
    unconcatenated = [[sprite_dict[i] for i in line] for line in empty.tolist()[0]]
    # print(unconcatenated)
    # unconcatenated = list (11) of list (16) of np 15x15x3
    
    half_concatenated = []
    for line in unconcatenated:
        half_concatenated.append(numpy.concatenate(line, axis=1))
        # line = np 15x240x3, unconcatenated = list (11) of lines
    
    concatenated = numpy.concatenate(half_concatenated, axis=0)
    # concatenated = np 165x240x3
    
    # f, axarr = plt.subplots(11, 16, figsize=(240, 165), gridspec_kw={'height_ratios' : [15 for i in range(11)]})
    # for i in range(11):
        # for j in range(16):
            # axarr[i,j].imshow(sprite_dict[empty[i][j]])
            # axarr[i,j].axis('off')
    # plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)
    # plt.show()
    
    plt.imshow(concatenated)
    plt.axis('off')
    plt.tight_layout()
    plt.show()